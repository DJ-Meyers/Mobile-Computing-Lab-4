//-
	Index.pug

	This is the home page for this project. It is configured to auto-connect
	to the server's websocket and handle any events fired from the server end.
//-

extends base

//- The visual portion of the page
block content
	link(rel="stylesheet", href="https://openlayers.org/en/v4.0.1/css/ol.css", type="text/css")
	script(src="https://cdn.polyfill.io/v2/polyfill.min.js?features=requestAnimationFrame,Element.prototype.classList,URL", type="text/javascript")
	script(src="https://openlayers.org/en/v4.0.1/build/ol.js")
	div(class='panel panel-default')
		div.panel-body
			h1 Test
			p Simple Website for tracking population 'heat maps' using MQTT
			form
				label cluster distance
				input(id="distance", type="range", min="0", max="100", step="1", value="40")
			// Implement the graphics portion in the canvas supplied below
			div.well
				div(id='map', class="map")

	div(class='panel')
		div.panel-body
			button(class='btn btn-primary', type='button', data-toggle='collapse', data-target='#debugLog', aria-expanded='false', aria-controls='debugLog') Show Debug Log
			div(id='debugLog', class='collapse')
				div(id='debugLogList', class='well')

//- The scripts needed by this page
block scripts
	script(type='text/javascript').
		$(() => {
			var socket = io();

			// Handle socket events here
			//--------------------------
			// Adds to the debug list
			socket.on('debug', data => {
				var time = new Date();
				$('#debugLogList').append('<div>' + time + ': ' + data.type + ' | ' + data.msg + '</div>');
			});
			//--------------------------
		});



	script(type='text/javascript').
		$(() => {
			// Handle any canvas code here
			//----------------------------
			//var canv = $('#map');
			var count = 200;
			var features = new Array(count);
			
			//openlayers coordinates for Joe's neighborhood
			var ridge = ol.proj.fromLonLat([-82.379458, 29.631389]);
			console.log(ridge);
			
			var e = 4500000;
			e = 130;
			for (var i = 0; i < count; ++i) {
				var coordinates = [-9170439.316385867 + 2 * e * Math.random() - e, 3456255.789961543 + 2 * e * Math.random() - e];
				features[i] = new ol.Feature(new ol.geom.Point(coordinates));
			}
				
			var source = new ol.source.Vector({
				features: features
			});
				
			var clusterSource = new ol.source.Cluster({
				distance: parseInt(distance.value, 10),
				source: source
			});
					
			var styleCache = {};
			var clusters = new ol.layer.Vector({
				source: clusterSource,
				style: function(feature) {
					var size = feature.get('features').length;
					var style = styleCache[size];
					if (!style) {
						style = new ol.style.Style({
							image: new ol.style.Circle({
								radius: 10,
								stroke: new ol.style.Stroke({
									color: '#fff'
								}),
								fill: new ol.style.Fill({
									color: '#3399CC'
								})
							}),
							text: new ol.style.Text({
								text: size.toString(),
								fill: new ol.style.Fill({
									color: '#fff'
								})
							})
						});
						styleCache[size] = style;
					}
					return style;
				}
			});
				
			var raster = new ol.layer.Tile({
				source: new ol.source.OSM()
			});
			
			var map = new ol.Map({
				layers: [raster, clusters],
				target: 'map',
				view: new ol.View({
					//Center the map with a zoom of 18 on Joe's neighborhood
					center: ridge,
					zoom: 18
				})
			});
				
			distance.addEventListener('input', function() {
				clusterSource.setDistance(parseInt(distance.value, 10));
			});
								
			//----------------------------
		});
	
