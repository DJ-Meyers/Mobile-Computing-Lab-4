//-
	Index.pug

	This is the home page for this project. It is configured to auto-connect
	to the server's websocket and handle any events fired from the server end.
//-

extends base

//- The visual portion of the page
block content
	//- link(rel="stylesheet", href="https://openlayers.org/en/v4.0.1/css/ol.css", type="text/css")
	//- script(src="https://cdn.polyfill.io/v2/polyfill.min.js?features=requestAnimationFrame,Element.prototype.classList,URL", type="text/javascript")
	script(src="http://www.openlayers.org/api/OpenLayers.js")
	div(class='panel panel-default')
		div.panel-body
			h2 Mobile Computing
			h3 Lab 4
			p Below is a heatmap that represents 4 locations on a map.  These locations keep track of how many people are nearby using Beacons and a 'Capacity Sensor' on an ARM mbed board.  The points on the map represent the location of the Beacons, and the 
			
			// Implement the graphics portion in the canvas supplied below
			div.well
				div(id='map', class="map")
				div(id='button-div')
					button(id='zone-1', type='button') Zone 1
					button(id='zone-2', type='button') Zone 2
					button(id='zone-3', type='button') Zone 3
					button(id='zone-4', type='button') Zone 4
					button(id='get', type='button') Get

	div(class='panel')
		div.panel-body
			button(class='btn btn-primary', type='button', data-toggle='collapse', data-target='#debugLog', aria-expanded='false', aria-controls='debugLog') Show Debug Log
			div(id='debugLog', class='collapse')
				div(id='debugLogList', class='well')
					
					

//- The scripts needed by this page
block scripts
	script(type='text/javascript').
		$(() => {
			var socket = io();

			// Handle socket events here
			//--------------------------
			// Adds to the debug list
			socket.on('debug', data => {
				var time = new Date();
				$('#debugLogList').append('<div>' + time + ': ' + data.type + ' | ' + data.msg + '</div>');
			});
			//--------------------------
		});



	script(type='text/javascript').
		$(() => {
			// Handle any canvas code here
			//----------------------------
			
			//Functions for sending a request to REST API.  These will be tied to buttons on the page for ease of testing.
			function incrementCapacity(id) {
				//Make the POST request to increment a zone's population
				var xhttp = new XMLHttpRequest();
				xhttp.open("POST", "/increaseCapacity/" + id.toString(), false);
				xhttp.setRequestHeader("Content-type", "application/json");
				xhttp.send();
				var response = JSON.parse(xhttp.responseText);
				//console.log(response);
			}
			
			function getCapacity(id) {
				//Make the GET request to find out a zone's population
				var xhttp = new XMLHttpRequest();
				xhttp.open("Get", "/getCapacity/" + id.toString(), false);
				xhttp.setRequestHeader("Content-type", "application/json");
				xhttp.send();
				var response = JSON.parse(xhttp.responseText);
				return response;
			}
			
			//On Click events for the different buttons
			var id = 0;
			var zone1 = $('#zone-1').click(function(){
				id = 1;
				incrementCapacity(id);
				//- console.log(id, left, top);
				//- var coordinates = ol.proj.fromLonLat(left, top);
				//- console.log(new ol.geom.Point(coordinates).toString());
				//- features.push(new ol.Feature(new ol.geom.Point(coordinates)));
				
			});
			
			var zone2 = $('#zone-2').click(function(){
				id = 2;
				incrementCapacity(id);
			});
			
			var zone3 = $('#zone-3').click(function(){
				id = 3;
				incrementCapacity(id);
			});
			
			var zone4 = $('#zone-4').click(function(){
				id = 4;
				incrementCapacity(id);
			});
			
			var get = $('#get').click(function(){
				console.log('Current Populations');
				//Iterate through zones and print their populations
				for(var i = 1; i <= 4; i++) {
					console.log(i.toString() + ": " + getCapacity(i).toString());
				}
			});
			
			//Coordinates for the Ridge
			var regularCoordinates = [29.632368, -82.379892]
			//var ridge = ol.proj.fromLonLat([regularCoordinates[1], regularCoordinates[0]]);
			
			//variables for ease of testing beacons.
			var left = -82.3799, right = -82.3798, top = 29.6324, bot = 29.6323;

			//Beacon objects
			var blueberry = {
				name: 'Blueberry Pi',
				lat: top,
				lon: left
			};
			var icy = {
				name: 'Icy Marshmallow',
				capacity: 3,
				lat: top,
				lon: right
			};
			var mint = {
				name: 'Mint Cocktail',
				capacity: 5,
				lat: bot,
				lon: left
			};
			var evanIcy = {
				name: 'Evans Icy Marshamllow',
				capacity: 2,
				lat: bot,
				lon: right
			};
			
			//Beacon and feature arrays
			//- var beacons = [blueberry, icy, mint, evanIcy];
			//- var features = new Array(beacons.length);
			//- 
			//- 
			//- //For each beacon, calculate its coordinates and put it on the map. 
			//- for (var i = 0; i < beacons.length; ++i) {
			//- 	var coordinates = ol.proj.fromLonLat([beacons[i].lon, beacons[i].lat]);
			//- 	features[i] = new ol.Feature(new ol.geom.Point(coordinates));
			//- }
			
			//Code needed for clusters
			//- var source = new ol.source.Vector({
			//- 	features: features
			//- });
			//- 	
			//- var clusterSource = new ol.source.Cluster({
			//- 	distance: 10,
			//- 	source: source
			//- });
			//- 		
			//- var styleCache = {};
			//- var clusters = new ol.layer.Vector({
			//- 	source: clusterSource,
			//- 	style: function(feature) {
			//- 		var size = feature.get('features').length;
			//- 		var style = styleCache[size];
			//- 		if (!style) {
			//- 			style = new ol.style.Style({
			//- 				image: new ol.style.Circle({
			//- 					radius: 10,
			//- 					stroke: new ol.style.Stroke({
			//- 						color: '#fff'
			//- 					}),
			//- 					fill: new ol.style.Fill({
			//- 						color: '#3399CC'
			//- 					})
			//- 				}),
			//- 				text: new ol.style.Text({
			//- 					text: size.toString(),
			//- 					fill: new ol.style.Fill({
			//- 						color: '#fff'
			//- 					})
			//- 				})
			//- 			});
			//- 			styleCache[size] = style;
			//- 		}
			//- 		return style;
			//- 	}
			//- });
			//- 	
			//- var raster = new ol.layer.Tile({
			//- 	source: new ol.source.OSM()
			//- });
			//- 
			//- var map = new ol.Map({
			//- 	layers: [raster, clusters],
			//- 	target: 'map',
			//- 	view: new ol.View({
			//- 		//Center the map with a zoom of 18 on Joe's neighborhood
			//- 		center: ridge,
			//- 		zoom: 18
			//- 	})
			//- });//End of cluster code
			
			//Code for markers
			map = new OpenLayers.Map("map");
		    map.addLayer(new OpenLayers.Layer.OSM());
		    
		    epsg4326 =  new OpenLayers.Projection("EPSG:4326"); //WGS 1984 projection
		    projectTo = map.getProjectionObject(); //The map projection (Spherical Mercator)
		   
		   //29.632368, -82.379892
		    var lonLat = new OpenLayers.LonLat( -82.379892 ,29.632368 ).transform(epsg4326, projectTo);
		          
		    
		    var zoom=18;
		    map.setCenter(lonLat, zoom);

		    var vectorLayer = new OpenLayers.Layer.Vector("Overlay");
		    
		    // Define markers as "features" of the vector layer:
		    var feature = new OpenLayers.Feature.Vector(
		            new OpenLayers.Geometry.Point( left, top ).transform(epsg4326, projectTo),
		            {description:'This is Zone 1.<br>Population: ', id:'1'} ,
		            {externalGraphic: 'http://labs.google.com/ridefinder/images/mm_20_red.png', graphicHeight: 20, graphicWidth: 12, graphicXOffset:0, graphicYOffset: -20  }
		        );    
		    vectorLayer.addFeatures(feature);
			
			var feature = new OpenLayers.Feature.Vector(
		            new OpenLayers.Geometry.Point( right, top ).transform(epsg4326, projectTo),
		            {description:'This is Zone 2.<br>Population: ', id:'2'} ,
		            {externalGraphic: 'http://labs.google.com/ridefinder/images/mm_20_red.png', graphicHeight: 20, graphicWidth: 12, graphicXOffset:0, graphicYOffset: -20  }
		        );    
		    vectorLayer.addFeatures(feature);
			
			var feature = new OpenLayers.Feature.Vector(
		            new OpenLayers.Geometry.Point( right, bot ).transform(epsg4326, projectTo),
		            {description:'This is Zone 3.<br>Population: ', id:'3'} ,
		            {externalGraphic: 'http://labs.google.com/ridefinder/images/mm_20_red.png', graphicHeight: 20, graphicWidth: 12, graphicXOffset:0, graphicYOffset: -20  }
					
		        );    
		    vectorLayer.addFeatures(feature);
			
			var feature = new OpenLayers.Feature.Vector(
		            new OpenLayers.Geometry.Point( left, bot ).transform(epsg4326, projectTo),
		            {description:'This is Zone 4.<br>Population: ', id:'4'} ,
		            {externalGraphic: 'http://labs.google.com/ridefinder/images/mm_20_red.png', graphicHeight: 20, graphicWidth: 12, graphicXOffset:0, graphicYOffset: -20  }
		        );    
		    vectorLayer.addFeatures(feature);
			
			  
		    map.addLayer(vectorLayer);
			
		    
		    //Add a selector control to the vectorLayer with popup functions
		    var controls = {
		      selector: new OpenLayers.Control.SelectFeature(vectorLayer, { onSelect: createPopup, onUnselect: destroyPopup })
		    };
			
		    function createPopup(feature) {
		      feature.popup = new OpenLayers.Popup.FramedCloud("pop",
		          feature.geometry.getBounds().getCenterLonLat(),
		          null,
		          '<div class="markerContent">'+feature.attributes.description+getCapacity(feature.attributes.id).toString()+'</div>',
		          null,
		          true,
		          function() { controls['selector'].unselectAll(); }
		      );
		      feature.popup.closeOnMove = true;
		      map.addPopup(feature.popup);
		    }
			
		    function destroyPopup(feature) {
		      feature.popup.destroy();
		      feature.popup = null;
		    }
		    
		    map.addControl(controls['selector']);
		    controls['selector'].activate();
								
			//----------------------------
		});
		
	
	
